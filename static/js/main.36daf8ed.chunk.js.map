{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","inputText","todos","setTodos","setStatus","value","onChange","e","console","log","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredToDos","key","App","useState","status","setFilteredToDos","useEffect","getTodos","filterHandler","saveTodos","localStorage","setItem","JSON","stringify","getItem","localTodo","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.36daf8ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({setInputText, inputText, todos, setTodos, setStatus}) => {\r\n\r\n    const inputTextHandler = (e) => {\r\n        console.log(e.target.value);\r\n        setInputText(e.target.value);\r\n    }\r\n\r\n    const submitTodoHandler = (e) => {\r\n        e.preventDefault();\r\n        setTodos([\r\n            ...todos, {text: inputText, completed: false, id: Math.random() * 1000}\r\n        ]);\r\n\r\n        setInputText('');\r\n    }\r\n\r\n    const statusHandler = (e) => {\r\n        setStatus(e.target.value);\r\n    }\r\n\r\n   \r\n    return (\r\n    <form>\r\n      <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n      <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Todo = ({text, setTodos, todos, todo}) => {\r\n    const deleteHandler = () => {\r\n      setTodos(todos.filter((el) => el.id !== todo.id))\r\n    }\r\n\r\n    const completeHandler = () => {\r\n        setTodos(todos.map((item) => {\r\n            if(item.id == todo.id) {\r\n                return {\r\n                    ...item, completed: !item.completed\r\n                }\r\n            }\r\n\r\n            return item;\r\n        }))\r\n    }\r\n    return (\r\n        <div className='todo'>\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\r\n                {text}\r\n            </li>\r\n            <button onClick={completeHandler} className=\"complete-btn\"><i className=\"fa fa-check\"></i></button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\"><i className=\"fa fa-trash\"></i></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport Todo from './Todo';\r\nconst TodoList = ({setTodos, todos, filteredToDos}) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n               {filteredToDos.map(todo => (\r\n                   <Todo\r\n                     setTodos={setTodos}\r\n                     todos={todos}\r\n                     todo={todo}\r\n                     text={todo.text}\r\n                     key={todo.id}\r\n                    />\r\n               ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  const [inputText, setInputText] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredToDos, setFilteredToDos] = useState([]);\n\n  useEffect(() => {\n    getTodos();\n  }, [])\n  \n  useEffect(() => {\n    filterHandler();\n    saveTodos();\n  }, [todos, status]);\n\n  const filterHandler = () => {\n    switch (status) {\n      case 'completed':\n        setFilteredToDos(todos.filter(todo => todo.completed === true))\n        break;\n      case 'uncompleted':\n        setFilteredToDos(todos.filter(todo => todo.completed === false))\n        break;\n        default:\n          setFilteredToDos(todos);\n          break;\n    }\n  }\n\n  const saveTodos = () => {\n      localStorage.setItem('todos', JSON.stringify(todos));\n  }\n\n  const getTodos = () => {\n    if(localStorage.getItem('todos') === null) {\n      localStorage.getItem('todos', JSON.stringify([]));\n    }\n\n    else {\n      let localTodo = JSON.parse(localStorage.getItem('todos'));\n      setTodos(localTodo);\n    }\n  }\n  return (\n    <div className=\"App\">\n     <header>\n       <h1>Todo list</h1>\n     </header>\n     <Form setInputText={setInputText} inputText={inputText} todos={todos} setTodos={setTodos} setStatus={setStatus}/>\n     <TodoList setTodos={setTodos} todos={todos} filteredToDos={filteredToDos}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}